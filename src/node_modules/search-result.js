const bel = require('bel')
const csjs = require('csjs-inject')

module.exports = searchResult

function searchResult ({page, flow = null, name = 'search result', data}, protocol) {
    const widget = 'ui-swarm-list'
    const send2Parent = protocol( receive )
    const ul = bel`<ul role="feeds" class=${css.feeds}></ul>`
    const feedsTotal  = bel`<span class=${css.feedsTotal}></span>`
    const searchFooter = bel`<div class=${css['search-footer']}>${feedsTotal}</div>`
    const content = bel`<div class=${css.content}>${ul}</div>` 
    const element = bel`<div class=${css.result}>${content}${searchFooter}</div>`

    renderList(data)
    send2Parent({page, from: name, flow: flow ? `${flow}/${widget}` : widget, type: 'init'})

    return element

    function click (obj) {
        return send2Parent({page, from: name, flow: flow ? `${flow}/${widget}` : widget, type: 'click', body: obj})
    }

    function renderList (promise) {
        ul.innerHTML = ''
        return promise.then( args => {
            list(args)
        })
    }

    function filterList ({data, keyword}) {
        ul.innerHTML = ''
        return list(data, keyword)
    }

    function list (args, keyword) {
        let len = `${args.length} feeds` 
        feedsTotal.innerText = len
        return args.map( obj => {     
            const type = obj.type === 'hypercore' ? 'core' : obj.type === 'hyperdrive' ? 'drive' : 'cabal'
            let li = bel`
            <li role=${obj.type} arial-label="${obj.swarm}" onclick=${ () => click({...obj, isValid: isValidFeeds(obj.feeds)}) }>
                <span class="${css.status}${isValidFeeds(obj.feeds) ? ` ${css.isValid}` : ''}"></span>
                <span class="${css.badge} ${css[type]}">${type}</span>
                <span class=${css.feed}>${highlight(keyword, obj.swarm)}</span>
            </li>`
            ul.append(li)
            content.append(ul)
        })
    }

    function highlight (string, swarm) {
        if (string === undefined || !swarm.toLowerCase().includes(string)) return swarm
        const matchStart = swarm.toLowerCase().indexOf(string)
        const matchEnd = matchStart + string.length - 1
        const beforeMatch = swarm.slice(0, matchStart)
        const matchLetter = swarm.slice(matchStart, matchEnd + 1)
        const afterMatch = swarm.slice(matchEnd+1)
        return bel`<span>${beforeMatch}<span class=${css.highlight}>${matchLetter}</span>${afterMatch}</span>`
    }

    function publish (key) {
        console.log('publish new swarm', key);
    }

    // TODO: wait to make a isValid feed
    function isValidFeeds (feeds) {
        return feeds.some( feed => feed.match(/https/ig) )
    }

    function receive (message) {
        const { page, flow, from, type, action, body} = message
        if (type === 'clear') renderList(body)
        if (type === 'filter') filterList(body)
        if (type === 'not found') publish(body)
    }
}

const css = csjs`
.result {
    position: absolute;
    width: 100%;
    height: 360px;
    z-index: 9;
    left: 0;
    top: 47px;
    display: grid;
    grid-template-rows: 1fr 27px;
    grid-template-columns: auto; 
    border-radius: 8px;
    background-color: #fff;
}
.content {
    overflow-x: hidden;
    overflow-y: auto;
}
.search-footer {
    font-size: 12px;
    line-height: 27px;
    text-align: right;
    color: #fff;
    background-color: #4B4B4B;
    padding: 0 10px;
    border-bottom-left-radius: 8px;
    border-bottom-right-radius: 8px;
}
.feeds {
    margin: 10px 0 0 0;
    padding: 0;
}
.feeds li {
    padding: 8px 10px;
    line-height: 16px;
    cursor: pointer;
    transition: background-color 0.45s ease-in-out;
}
.feeds li:hover {
    background-color: #F5F5F5;
}
.status {
    display: inline-block;
    width: 12px;
    height: 12px;
    background-color: #D9D9D9;
    border-radius: 50px;
    margin-right: 10px;
}
.isValid {
    background-color: #109B36;
}
.badge {
    border-radius: 10px;
    padding: 2px 8px;
    text-align: center;
    margin-right: 5px;
}
.core {
    background-color: #BCE0FD;
}
.drive {
    background-color: #FFDFA2;
}
.cabal {
    background-color: #E9D3FF;
}
.feed {}
.hide {
    display: none;
}
.highlight {
    background-color: #FFEEAF;
}
`